esphome:
  name: controlco2

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "ADD-A-KEY-HERE"
  services:
    - service: mhz19_calibrate_zero
      then:
        - mhz19.calibrate_zero: mhz19_id

ota:
  password: "ADD-A-DIFFERENT-KEY-HERE"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Controlco2 Fallback Hotspot"
    password: "ADD-A-FALLBACK-KEY-HERE"

captive_portal:

web_server:
  port: 80

globals:
  - id: co2_warning
    type: int
    restore_value: no
    initial_value: '700'
  - id: co2_critical
    type: int
    restore_value: no
    initial_value: '800'

# Example configuration entry
uart:
  rx_pin: 27
  tx_pin: 26
  baud_rate: 9600

sensor:
  - platform: mhz19
    id: mhz19_id
    co2:
      name: "MH-Z19 CO2 Value"
      id: co2_sensor
    temperature:
      name: "MH-Z19 Temperature"
    update_interval: 60s
    automatic_baseline_calibration: false
  - platform: dht
    pin: 15
    id: dht_sensor
    temperature:
      name: "Test Room Temperature"
      id: dht_temp
    humidity:
      name: "Test Room Humidity"
      id: dht_humidity
    update_interval: 60s

font:
  - file: "gfonts://Roboto@bold"
    id: roboto
    size: 80
  - file: "gfonts://Roboto@bold"
    id: roboto_small
    size: 36

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

color:
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%

graph:
  - id: co2_graph
    duration: 1h
    width: 200
    height: 65
    y_grid: 50 # ppm/div
    traces:
      - sensor: co2_sensor
        line_type: SOLID
        line_thickness: 2
        color: my_white

display:
  - platform: st7789v
    model: TTGO TDisplay 135x240
    backlight_pin: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    rotation: 90
    id: co2display
    pages:
      - id: page1
        lambda: |-
          if (id(co2_sensor).state >= id(co2_critical)) {
            it.filled_rectangle(0, 0, it.get_width(), it.get_height(), my_red);
            it.printf(25, 25, id(roboto), my_white, "%.0f", id(co2_sensor).state);
          } else if (id(co2_sensor).state >= id(co2_warning)) {
            it.filled_rectangle(0, 0, it.get_width(), it.get_height(), my_yellow);
            it.printf(25, 25, id(roboto), my_black, "%.0f", id(co2_sensor).state);
          } else {
            it.printf(25, 25, id(roboto), my_white, "%.0f", id(co2_sensor).state);
          }
      - id: page2
        lambda: |-
          it.printf(10, 85, id(roboto_small), my_white, "%.0f ppm", id(co2_sensor).state);
          it.graph(10, 10, id(co2_graph));

# For example cycle through pages on a timer
interval:
  - interval: 15s
    then:
      - display.page.show_next: co2display
      - component.update: co2display
